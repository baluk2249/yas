pipeline {
    agent any
    environment {
        MAVEN_OPTS = '-Dmaven.repo.local=.m2/repository'
    }
    stages {
        
        stage('Build') {
            steps {
                sh 'mvn clean install -pl cart -am'
            }
        }

        stage('Scan') {
            steps {
                withSonarQubeEnv(installationName: 'sq') {
                    sh 'mvn org.sonarsource.scanner.maven:sonar-maven-plugin:sonar -pl cart -am'
                }
            }
        }
        

        stage('Run maven checkstyle and record issues') {
            steps {
                sh 'mvn checkstyle:checkstyle -pl cart -am -Dcheckstyle.output.file=cart-checkstyle-result.xml'
                recordIssues(tools: [checkStyle(pattern: '**/cart-checkstyle-result.xml')])
            }
        }
        
        stage('test') {
            steps {
                junit 'cart/**/*-reports/TEST*.xml'
                // recordIssues(tools: [java(pattern: 'cart/**/*-reports/TEST*.xml')])
            }
        }
        /*
        stage('OWASP Dependency-Check') {
            steps {
                sh '''
                mvn org.owasp:dependency-check-maven:12.0.0:check \
                        -pl cart -am \
                        -Ddependency-check.cache.directory=./dependency-check-cache \
                        -Ddependency-check.data.directory=./dependency-check-data
                '''
                recordIssues(tools: [dependencyCheck(pattern: 'cart/dependency-check-report.xml')])
            }
        }
        */

        stage('Log in to the Container registry') {
            steps {
                withCredentials([usernamePassword(credentialsId: 'docker_cred', usernameVariable: 'USERNAME', passwordVariable: 'PASSWORD')]) {
                    sh 'docker login -u $USERNAME -p $PASSWORD'
                }
            }
                    }
        stage('Build Docker image') {
            steps {
                script {
                    dir('cart'){
                        def dockerImage = docker.build("baluk2249/cart:${env.BUILD_NUMBER}")
                    dockerImage.push()
                    
                    }
                }
            }
        }
    }
    post {
        always {
            // Clean up the workspace after the build
            cleanWs()
        }
    }

}